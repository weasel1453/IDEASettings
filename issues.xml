<application>
  <component name="YouTrack Issues">
    <option name="persistentIssues">
      <map>
        <entry key="ThirdParty tmclachlan@http://youtrack.intranet.ulsinc.com" value="[{&quot;id&quot;:&quot;ST-131&quot;,&quot;entityId&quot;:&quot;64-6173&quot;,&quot;jiraId&quot;:null,&quot;field&quot;:[{&quot;name&quot;:&quot;projectShortName&quot;,&quot;value&quot;:&quot;ST&quot;},{&quot;name&quot;:&quot;numberInProject&quot;,&quot;value&quot;:&quot;131&quot;},{&quot;name&quot;:&quot;summary&quot;,&quot;value&quot;:&quot;All of our JSON parsing code is using an invalid error-handling approach&quot;},{&quot;name&quot;:&quot;description&quot;,&quot;value&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;The rapidjson library by design does not use C++ exceptions.  This is one of the ways that it achieves its very fast performance.  We do not particularly need its very fast performance &amp;ndash; UlsControl typically parses a JSON file every couple of minutes, and the difference between 10ms and 100ms to parse such a file is totally irrelevant.  I would prefer to use a library that throws meaningful exceptions when error conditions occur, at the expense of somewhat slower performance.&lt;br/&gt;&lt;br/&gt;I was not really focused on that issue when I first started writing code that used rapidjson.  At some point I discovered that rapidjson was using assert() calls to check for various error conditions &amp;ndash; for example, trying to access a field that does not exist in the JSON document.  I very strongly believe that this is an inappropriate use of assert().  Assert() is meant to enforce global invariants whose violation is an indication of a coding error.  Assert() is compiled away to nothing in release builds.  This is an atrocious way to handle run-time errors.&lt;br/&gt;&lt;br/&gt;Apparently the authors of rapidjson think that the coding error is the fault of the user of their library; the calling code should know better than to try to access a field that doesn&amp;#39;t exist.&lt;br/&gt;&lt;br/&gt;Anyway, it appears that my decision at the time was to simply translate the assert() calls into throws of C++ exceptions using the RAPIDJSON_ASSERT macro.  Then I wrote nice simple JSON parsing code (for example, UlsHttpTransition.cpp, LoadPrintSettingsFromJSON) that had a single try/catch around the whole function.&lt;br/&gt;&lt;br/&gt;But now we are using more modern compilers that are detecting some coding errors that weren&amp;#39;t being detected two years ago.  In particular, both Clang and gcc are emitting compiler warnings indicating that RAPIDJSON_ASSERT (which is throwing an exception) is being used in rapidjson functions that are labelled &amp;quot;noexcept&amp;quot;.  The result will be that these exceptions will not be propagated; they will immediately result in a call to std::terminate, which will crash the application.&lt;br/&gt;&lt;br/&gt;So I have two choices:&lt;br/&gt;&lt;ul class=\&quot;wiki-list0\&quot;&gt;&lt;li&gt; Use a different JSON parsing library that uses C++ exceptions to indicate error conditions like this.&lt;br/&gt;&lt;/li&gt;&lt;li&gt; Change all of our JSON parsing code to not use operator[] to access fields, but instead explicitly check for the presence of each field before accessing it.  &lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;Unfortunately in both cases, there are hundreds if not thousands of JSON field accesses in our code.  This will be a lot of work.  But it is necessary; currently UlsControl will immediately crash if we feed it a JSON document that is missing expected fields.&lt;/div&gt;\n&quot;},{&quot;name&quot;:&quot;created&quot;,&quot;value&quot;:&quot;1503069454916&quot;},{&quot;name&quot;:&quot;updated&quot;,&quot;value&quot;:&quot;1533660218307&quot;},{&quot;name&quot;:&quot;updaterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;updaterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;reporterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;reporterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;commentsCount&quot;,&quot;value&quot;:&quot;3&quot;},{&quot;name&quot;:&quot;votes&quot;,&quot;value&quot;:&quot;0&quot;},{&quot;name&quot;:&quot;Priority&quot;,&quot;value&quot;:[&quot;Normal&quot;],&quot;valueId&quot;:[&quot;Normal&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#e6f6cf&quot;,&quot;fg&quot;:&quot;#4da400&quot;}},{&quot;name&quot;:&quot;Type&quot;,&quot;value&quot;:[&quot;Bug&quot;],&quot;valueId&quot;:[&quot;Bug&quot;],&quot;color&quot;:null},{&quot;name&quot;:&quot;State&quot;,&quot;value&quot;:[&quot;In Progress&quot;],&quot;valueId&quot;:[&quot;In Progress&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#fed74a&quot;,&quot;fg&quot;:&quot;#444&quot;}},{&quot;name&quot;:&quot;Assignee&quot;,&quot;value&quot;:[{&quot;value&quot;:&quot;tmclachlan&quot;,&quot;fullName&quot;:&quot;Tyler McLachlan&quot;}]},{&quot;name&quot;:&quot;Milestone&quot;,&quot;value&quot;:[&quot;2018 08 10&quot;],&quot;valueId&quot;:[&quot;2018 08 10&quot;],&quot;color&quot;:null}],&quot;comment&quot;:[{&quot;id&quot;:&quot;69-9732&quot;,&quot;author&quot;:&quot;tcrews&quot;,&quot;authorFullName&quot;:&quot;Tim Crews&quot;,&quot;issueId&quot;:&quot;ST-131&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;I spent some time this weekend investigating how much work it will be to fix this.  It will be a lot.  No matter how we do it, it will involve touching every line of code that accesses a field in a JSON file.  There are thousands of such lines.&lt;br/&gt;&lt;br/&gt;I created a feature branch branches/tcrews/JsonErrors.  In that branch, I deleted rapidjson and replaced it with &lt;a href=\&quot;https://github.com/nlohmann/json\&quot; onclick=\&quot;window.open(window.decodeURIComponent('https%3A%2F%2Fgithub.com%2Fnlohmann%2Fjson'), '_blank').opener=null; return false;\&quot;&gt;https://github.com/nlohmann/json&lt;/a&gt;.  This looks like a very nice C++ JSON library.&lt;br/&gt;&lt;br/&gt;I started working my way through the UlsCommon project, fixing up each line of JSON code.  After a total of about three hours of work, I estimate I was less than halfway done just with that project.  I think it would take ten to twenty more hours of work to finish this task.  I have left that branch in its partially-completed state, but I will not continue working on it unless directed by the management.&lt;br/&gt;&lt;br/&gt;In the meantime, if DBServer or UlsControl [edit: or UILauncher] tries to access a JSON file that is missing a field, the application will crash.  This is not quite the major issue that it sounds like because our own software creates those JSON files, and it does not create them with missing fields. [Edit: Except during maintenance, or when we are transitioning between different JSON formats.]  But if a user hand-edited one of our JSON files, that could cause a crash.  Users shouldn&amp;#39;t do that.&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1503336174098,&quot;updated&quot;:1507038772507,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]},{&quot;id&quot;:&quot;69-14748&quot;,&quot;author&quot;:&quot;ajones&quot;,&quot;authorFullName&quot;:&quot;Aaron Jones&quot;,&quot;issueId&quot;:&quot;ST-131&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;&lt;div class=\&quot;wiki quote\&quot;&gt;Change all of our JSON parsing code to not use operator[] to access fields, but instead explicitly check for the presence of each field before accessing it.  &lt;/div&gt;&lt;br/&gt;&lt;br/&gt;I haven&amp;#39;t looked at the code yet, but is there any chance we could write a clever awk or sed script to modify the code to check for presence before accessing a field?&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1527607607741,&quot;updated&quot;:null,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]},{&quot;id&quot;:&quot;69-14749&quot;,&quot;author&quot;:&quot;tcrews&quot;,&quot;authorFullName&quot;:&quot;Tim Crews&quot;,&quot;issueId&quot;:&quot;ST-131&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;When I made the changes on branches/tcrews/JsonErrors, I used regular expression search and replace as much as possible within my IDE.  I preferred this to sed/awk because it allowed me to be more targeted with the regions of code being affected, and also allowed me to account for minor variations in different code modules.&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1527611016821,&quot;updated&quot;:1503336174089,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]}],&quot;tag&quot;:[]}, {&quot;id&quot;:&quot;ST-9&quot;,&quot;entityId&quot;:&quot;64-4975&quot;,&quot;jiraId&quot;:null,&quot;field&quot;:[{&quot;name&quot;:&quot;projectShortName&quot;,&quot;value&quot;:&quot;ST&quot;},{&quot;name&quot;:&quot;numberInProject&quot;,&quot;value&quot;:&quot;9&quot;},{&quot;name&quot;:&quot;summary&quot;,&quot;value&quot;:&quot;Implement DatabaseMigrator using cross-platform technology&quot;},{&quot;name&quot;:&quot;description&quot;,&quot;value&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;If we are going to run the DB Server on Linux and macOS, then we will need to be able to install and upgrade the materials database on those platforms, which I think means we will need to run the DatabaseMigrator application.&lt;br/&gt;&lt;br/&gt;DatabaseMigrator is written in C#.  That in itself is not a show-stopper, because Mono is available for Mac OS.  But DatabaseMigrator also depends on a few NuGet packages that might not be available in that environment.&lt;br/&gt;&lt;br/&gt;Austyn and I have discussed this.  We are leaning towards using C++ and SOCI, the same technology used by DB Server itself.&lt;/div&gt;\n&quot;},{&quot;name&quot;:&quot;created&quot;,&quot;value&quot;:&quot;1488297180566&quot;},{&quot;name&quot;:&quot;updated&quot;,&quot;value&quot;:&quot;1533233637597&quot;},{&quot;name&quot;:&quot;updaterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;updaterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;reporterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;reporterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;commentsCount&quot;,&quot;value&quot;:&quot;4&quot;},{&quot;name&quot;:&quot;votes&quot;,&quot;value&quot;:&quot;0&quot;},{&quot;name&quot;:&quot;links&quot;,&quot;value&quot;:[{&quot;value&quot;:&quot;ST-583&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;},{&quot;value&quot;:&quot;ST-584&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;},{&quot;value&quot;:&quot;ST-585&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;},{&quot;value&quot;:&quot;ST-586&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;},{&quot;value&quot;:&quot;ST-587&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;},{&quot;value&quot;:&quot;ST-632&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;}]},{&quot;name&quot;:&quot;Priority&quot;,&quot;value&quot;:[&quot;Normal&quot;],&quot;valueId&quot;:[&quot;Normal&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#e6f6cf&quot;,&quot;fg&quot;:&quot;#4da400&quot;}},{&quot;name&quot;:&quot;Type&quot;,&quot;value&quot;:[&quot;Feature&quot;],&quot;valueId&quot;:[&quot;Feature&quot;],&quot;color&quot;:null},{&quot;name&quot;:&quot;State&quot;,&quot;value&quot;:[&quot;In Progress&quot;],&quot;valueId&quot;:[&quot;In Progress&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#fed74a&quot;,&quot;fg&quot;:&quot;#444&quot;}},{&quot;name&quot;:&quot;Assignee&quot;,&quot;value&quot;:[{&quot;value&quot;:&quot;tmclachlan&quot;,&quot;fullName&quot;:&quot;Tyler McLachlan&quot;}]},{&quot;name&quot;:&quot;Milestone&quot;,&quot;value&quot;:[&quot;2018 08 10&quot;],&quot;valueId&quot;:[&quot;2018 08 10&quot;],&quot;color&quot;:null}],&quot;comment&quot;:[{&quot;id&quot;:&quot;69-14741&quot;,&quot;author&quot;:&quot;tcrews&quot;,&quot;authorFullName&quot;:&quot;Tim Crews&quot;,&quot;issueId&quot;:&quot;ST-9&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;Tyler McLachlan will start working on this now.  Although he has a YouTrack login, his user name does not appear in the list of available names for the Assignee field.&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1527531817180,&quot;updated&quot;:1527531827679,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]},{&quot;id&quot;:&quot;69-14932&quot;,&quot;author&quot;:&quot;wvalentine&quot;,&quot;authorFullName&quot;:&quot;Wendy Valentine&quot;,&quot;issueId&quot;:&quot;ST-9&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;&lt;a href=\&quot;/user/tcrews\&quot; title=\&quot;tcrews\&quot;&gt;Tim Crews&lt;/a&gt; Can we turn this into a feature with subtasks to track?&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1528157666576,&quot;updated&quot;:null,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]},{&quot;id&quot;:&quot;69-15163&quot;,&quot;author&quot;:&quot;tcrews&quot;,&quot;authorFullName&quot;:&quot;Tim Crews&quot;,&quot;issueId&quot;:&quot;ST-9&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;This will not actually be done by 6/15, but it does have to be done before the software is deployed.  I didn&amp;#39;t want this feature to get lost.&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1528977826716,&quot;updated&quot;:1527531817165,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]},{&quot;id&quot;:&quot;69-15169&quot;,&quot;author&quot;:&quot;wvalentine&quot;,&quot;authorFullName&quot;:&quot;Wendy Valentine&quot;,&quot;issueId&quot;:&quot;ST-9&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;&lt;a href=\&quot;/user/tcrews\&quot; title=\&quot;tcrews\&quot;&gt;Tim Crews&lt;/a&gt; &lt;a href=\&quot;/user/tmclachlan\&quot; title=\&quot;tmclachlan\&quot;&gt;Tyler McLachlan&lt;/a&gt; Do we have a timeline on this yet?&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1528990926983,&quot;updated&quot;:1528157666576,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]}],&quot;tag&quot;:[]}]" />
      </map>
    </option>
  </component>
</application>