<application>
  <component name="YouTrack Issues">
    <option name="persistentIssues">
      <map>
        <entry key="LSM tmclachlan@http://youtrack.intranet.ulsinc.com" value="[{&quot;id&quot;:&quot;ST-720&quot;,&quot;entityId&quot;:&quot;64-9204&quot;,&quot;jiraId&quot;:null,&quot;field&quot;:[{&quot;name&quot;:&quot;projectShortName&quot;,&quot;value&quot;:&quot;ST&quot;},{&quot;name&quot;:&quot;numberInProject&quot;,&quot;value&quot;:&quot;720&quot;},{&quot;name&quot;:&quot;summary&quot;,&quot;value&quot;:&quot;Store laser system-specific kinematic parameters on the laser system SD card&quot;},{&quot;name&quot;:&quot;description&quot;,&quot;value&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;Because of &lt;a href=\&quot;/issue/ST-131\&quot; target=\&quot;_self\&quot; title=\&quot;All of our JSON parsing code is using an invalid error-handling approach\&quot;&gt;ST-131&lt;/a&gt;, it is highly desirable to stop using rapidjson to serialize motion planning configuration parameters (including laser system-specific kinematic parameters) to/from disk. (The bogus error-handling approach adopted by this library in the name of performance can cause application termination if we try to access a JSON field that doesn&amp;#39;t exist.)&lt;br/&gt;&lt;br/&gt;My first proposed solution was to keep using JSON, but to use a different library to do it. This would require changing every line of code that currently accesses a JSON field.&lt;br/&gt;&lt;br/&gt;But if we&amp;#39;re going to touch every line of this code anyway, I think this is a good time to address several other technical issues with the way the kinematic parameters are stored.&lt;br/&gt;&lt;br/&gt;First of all, JSON is not an ideal way to access this highly-structured data.  Although JSON is meant to be human readable, the motion planning configuration JSON file is so deeply nested and large that it is basically impossible to navigate.  Instead, I had to create a graphical user interface to manage the content of this file (the so-called &amp;quot;Planning GUI&amp;quot;).  This file is essentially being treated as if it was not human readable.&lt;br/&gt;&lt;br/&gt;Second, the laser system-specific kinematic parameters for all laser systems are stored in a single JSON file.  We extract the correct parameters for the currently-attached laser system by looking up that laser system&amp;#39;s model number in the file.  This is one of the few remaining places in the control service code that relies on the concept of a &amp;quot;model&amp;quot;.  We have a system-wide design goal of eliminating the &amp;quot;model&amp;quot; concept.  Instead, parameters that are specific to a laser system should be stored on that laser system&amp;#39;s SD card, then accessed by the control service when the laser system is connected.  This is how we handle the MachineConfiguration class, for example.  The MachineConfiguration class is backed by data stored in the file DEVCAPS.INI on the laser system SD card.&lt;br/&gt;&lt;br/&gt;The INI file format would be an even worse format than JSON for storing motion planning configuration parameters, because INI files can only support up to two levels of organization.  So I am sure I don&amp;#39;t want to store these parameters in DEVCAPS.INI or any other INI file.  The INI format was a good choice for DEVCAPS.INI because the ULTRA CPU firmware needed to access values from this file, and it did not take much program space to include an INI file parser in the ULTRA CPU firmware.  But the ULTRA CPU firmware doesn&amp;#39;t need to know anything about the motion planning parameters.  The motion planning parameter file can be treated as a black box by the ULTRA CPU firmware.&lt;br/&gt;&lt;br/&gt;I think it would be worth some time to investigate the advantages of storing the kinematic parameters in a relational database, with proper tables and queries.  Do not be concerned that this would turn into a task anywhere near as large as the DB Server (now called the Materials service).  The kinematic parameters would likely be stored in three or four simple tables, and they would be accessed with just a couple of queries.&lt;br/&gt;&lt;br/&gt;If that doesn&amp;#39;t pan out, we can always fall back to storing the parameters in the Boost.Serialization format, as I have proposed for PrintParams and ImportOptions.&lt;/div&gt;\n&quot;},{&quot;name&quot;:&quot;created&quot;,&quot;value&quot;:&quot;1533928118241&quot;},{&quot;name&quot;:&quot;updated&quot;,&quot;value&quot;:&quot;1533928289780&quot;},{&quot;name&quot;:&quot;updaterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;updaterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;reporterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;reporterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;commentsCount&quot;,&quot;value&quot;:&quot;1&quot;},{&quot;name&quot;:&quot;votes&quot;,&quot;value&quot;:&quot;0&quot;},{&quot;name&quot;:&quot;links&quot;,&quot;value&quot;:[{&quot;value&quot;:&quot;ST-131&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;subtask of&quot;}]},{&quot;name&quot;:&quot;Priority&quot;,&quot;value&quot;:[&quot;Normal&quot;],&quot;valueId&quot;:[&quot;Normal&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#e6f6cf&quot;,&quot;fg&quot;:&quot;#4da400&quot;}},{&quot;name&quot;:&quot;Type&quot;,&quot;value&quot;:[&quot;Task&quot;],&quot;valueId&quot;:[&quot;Task&quot;],&quot;color&quot;:null},{&quot;name&quot;:&quot;State&quot;,&quot;value&quot;:[&quot;Open&quot;],&quot;valueId&quot;:[&quot;Open&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#0070e4&quot;,&quot;fg&quot;:&quot;#fff&quot;}},{&quot;name&quot;:&quot;Assignee&quot;,&quot;value&quot;:[{&quot;value&quot;:&quot;tmclachlan&quot;,&quot;fullName&quot;:&quot;Tyler McLachlan&quot;}]}],&quot;comment&quot;:[{&quot;id&quot;:&quot;69-16528&quot;,&quot;author&quot;:&quot;tcrews&quot;,&quot;authorFullName&quot;:&quot;Tim Crews&quot;,&quot;issueId&quot;:&quot;ST-720&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;Unlike the other tasks that are children of &lt;a href=\&quot;/issue/ST-131\&quot; target=\&quot;_self\&quot; title=\&quot;All of our JSON parsing code is using an invalid error-handling approach\&quot;&gt;ST-131&lt;/a&gt;, it would be nice to complete this task before any ULTRA systems are shipped, since it would entail storing a file on the ULTRA system SD card.  However, even if we didn&amp;#39;t complete this task before initial release, we could arrange for an updated control service to create this file on-the-fly and store it to the SD card after the fact.&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1533928289780,&quot;updated&quot;:null,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]}],&quot;tag&quot;:[]}, {&quot;id&quot;:&quot;ST-131&quot;,&quot;entityId&quot;:&quot;64-6173&quot;,&quot;jiraId&quot;:null,&quot;field&quot;:[{&quot;name&quot;:&quot;projectShortName&quot;,&quot;value&quot;:&quot;ST&quot;},{&quot;name&quot;:&quot;numberInProject&quot;,&quot;value&quot;:&quot;131&quot;},{&quot;name&quot;:&quot;summary&quot;,&quot;value&quot;:&quot;All of our JSON parsing code is using an invalid error-handling approach&quot;},{&quot;name&quot;:&quot;description&quot;,&quot;value&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;The rapidjson library by design does not use C++ exceptions.  This is one of the ways that it achieves its very fast performance.  We do not particularly need its very fast performance &amp;ndash; UlsControl typically parses a JSON file every couple of minutes, and the difference between 10ms and 100ms to parse such a file is totally irrelevant.  I would prefer to use a library that throws meaningful exceptions when error conditions occur, at the expense of somewhat slower performance.&lt;br/&gt;&lt;br/&gt;I was not really focused on that issue when I first started writing code that used rapidjson.  At some point I discovered that rapidjson was using assert() calls to check for various error conditions &amp;ndash; for example, trying to access a field that does not exist in the JSON document.  I very strongly believe that this is an inappropriate use of assert().  Assert() is meant to enforce global invariants whose violation is an indication of a coding error.  Assert() is compiled away to nothing in release builds.  This is an atrocious way to handle run-time errors.&lt;br/&gt;&lt;br/&gt;Apparently the authors of rapidjson think that the coding error is the fault of the user of their library; the calling code should know better than to try to access a field that doesn&amp;#39;t exist.&lt;br/&gt;&lt;br/&gt;Anyway, it appears that my decision at the time was to simply translate the assert() calls into throws of C++ exceptions using the RAPIDJSON_ASSERT macro.  Then I wrote nice simple JSON parsing code (for example, UlsHttpTransition.cpp, LoadPrintSettingsFromJSON) that had a single try/catch around the whole function.&lt;br/&gt;&lt;br/&gt;But now we are using more modern compilers that are detecting some coding errors that weren&amp;#39;t being detected two years ago.  In particular, both Clang and gcc are emitting compiler warnings indicating that RAPIDJSON_ASSERT (which is throwing an exception) is being used in rapidjson functions that are labelled &amp;quot;noexcept&amp;quot;.  The result will be that these exceptions will not be propagated; they will immediately result in a call to std::terminate, which will crash the application.&lt;br/&gt;&lt;br/&gt;So I have two choices:&lt;br/&gt;&lt;ul class=\&quot;wiki-list0\&quot;&gt;&lt;li&gt; Use a different JSON parsing library that uses C++ exceptions to indicate error conditions like this.&lt;br/&gt;&lt;/li&gt;&lt;li&gt; Change all of our JSON parsing code to not use operator[] to access fields, but instead explicitly check for the presence of each field before accessing it.  &lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;Unfortunately in both cases, there are hundreds if not thousands of JSON field accesses in our code.  This will be a lot of work.  But it is necessary; currently UlsControl will immediately crash if we feed it a JSON document that is missing expected fields.&lt;/div&gt;\n&quot;},{&quot;name&quot;:&quot;created&quot;,&quot;value&quot;:&quot;1503069454916&quot;},{&quot;name&quot;:&quot;updated&quot;,&quot;value&quot;:&quot;1533928118241&quot;},{&quot;name&quot;:&quot;updaterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;updaterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;reporterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;reporterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;commentsCount&quot;,&quot;value&quot;:&quot;4&quot;},{&quot;name&quot;:&quot;votes&quot;,&quot;value&quot;:&quot;0&quot;},{&quot;name&quot;:&quot;links&quot;,&quot;value&quot;:[{&quot;value&quot;:&quot;ST-716&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;},{&quot;value&quot;:&quot;ST-718&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;},{&quot;value&quot;:&quot;ST-719&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;},{&quot;value&quot;:&quot;ST-720&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;}]},{&quot;name&quot;:&quot;Priority&quot;,&quot;value&quot;:[&quot;Normal&quot;],&quot;valueId&quot;:[&quot;Normal&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#e6f6cf&quot;,&quot;fg&quot;:&quot;#4da400&quot;}},{&quot;name&quot;:&quot;Type&quot;,&quot;value&quot;:[&quot;Feature&quot;],&quot;valueId&quot;:[&quot;Feature&quot;],&quot;color&quot;:null},{&quot;name&quot;:&quot;State&quot;,&quot;value&quot;:[&quot;In Progress&quot;],&quot;valueId&quot;:[&quot;In Progress&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#fed74a&quot;,&quot;fg&quot;:&quot;#444&quot;}},{&quot;name&quot;:&quot;Assignee&quot;,&quot;value&quot;:[{&quot;value&quot;:&quot;tmclachlan&quot;,&quot;fullName&quot;:&quot;Tyler McLachlan&quot;}]},{&quot;name&quot;:&quot;Milestone&quot;,&quot;value&quot;:[&quot;2018 08 10&quot;],&quot;valueId&quot;:[&quot;2018 08 10&quot;],&quot;color&quot;:null}],&quot;comment&quot;:[{&quot;id&quot;:&quot;69-9732&quot;,&quot;author&quot;:&quot;tcrews&quot;,&quot;authorFullName&quot;:&quot;Tim Crews&quot;,&quot;issueId&quot;:&quot;ST-131&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;I spent some time this weekend investigating how much work it will be to fix this.  It will be a lot.  No matter how we do it, it will involve touching every line of code that accesses a field in a JSON file.  There are thousands of such lines.&lt;br/&gt;&lt;br/&gt;I created a feature branch branches/tcrews/JsonErrors.  In that branch, I deleted rapidjson and replaced it with &lt;a href=\&quot;https://github.com/nlohmann/json\&quot; onclick=\&quot;window.open(window.decodeURIComponent('https%3A%2F%2Fgithub.com%2Fnlohmann%2Fjson'), '_blank').opener=null; return false;\&quot;&gt;https://github.com/nlohmann/json&lt;/a&gt;.  This looks like a very nice C++ JSON library.&lt;br/&gt;&lt;br/&gt;I started working my way through the UlsCommon project, fixing up each line of JSON code.  After a total of about three hours of work, I estimate I was less than halfway done just with that project.  I think it would take ten to twenty more hours of work to finish this task.  I have left that branch in its partially-completed state, but I will not continue working on it unless directed by the management.&lt;br/&gt;&lt;br/&gt;In the meantime, if DBServer or UlsControl [edit: or UILauncher] tries to access a JSON file that is missing a field, the application will crash.  This is not quite the major issue that it sounds like because our own software creates those JSON files, and it does not create them with missing fields. [Edit: Except during maintenance, or when we are transitioning between different JSON formats.]  But if a user hand-edited one of our JSON files, that could cause a crash.  Users shouldn&amp;#39;t do that.&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1503336174098,&quot;updated&quot;:1507038772507,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]},{&quot;id&quot;:&quot;69-14748&quot;,&quot;author&quot;:&quot;ajones&quot;,&quot;authorFullName&quot;:&quot;Aaron Jones&quot;,&quot;issueId&quot;:&quot;ST-131&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;&lt;div class=\&quot;wiki quote\&quot;&gt;Change all of our JSON parsing code to not use operator[] to access fields, but instead explicitly check for the presence of each field before accessing it.  &lt;/div&gt;&lt;br/&gt;&lt;br/&gt;I haven&amp;#39;t looked at the code yet, but is there any chance we could write a clever awk or sed script to modify the code to check for presence before accessing a field?&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1527607607741,&quot;updated&quot;:null,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]},{&quot;id&quot;:&quot;69-14749&quot;,&quot;author&quot;:&quot;tcrews&quot;,&quot;authorFullName&quot;:&quot;Tim Crews&quot;,&quot;issueId&quot;:&quot;ST-131&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;When I made the changes on branches/tcrews/JsonErrors, I used regular expression search and replace as much as possible within my IDE.  I preferred this to sed/awk because it allowed me to be more targeted with the regions of code being affected, and also allowed me to account for minor variations in different code modules.&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1527611016821,&quot;updated&quot;:1503336174089,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]},{&quot;id&quot;:&quot;69-16527&quot;,&quot;author&quot;:&quot;tcrews&quot;,&quot;authorFullName&quot;:&quot;Tim Crews&quot;,&quot;issueId&quot;:&quot;ST-131&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;I removed this issue from the current sprint, even though Tyler is currently working on it, because it is not strictly necessary before our initial software release. Tyler is working on this feature on an SVN branch that will have no effect on the trunk software or the initial released software unless it gets done in time, and the management decides to incorporate this feature into the initial release.&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1533926897097,&quot;updated&quot;:1527611016821,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]}],&quot;tag&quot;:[]}, {&quot;id&quot;:&quot;ST-719&quot;,&quot;entityId&quot;:&quot;64-9202&quot;,&quot;jiraId&quot;:null,&quot;field&quot;:[{&quot;name&quot;:&quot;projectShortName&quot;,&quot;value&quot;:&quot;ST&quot;},{&quot;name&quot;:&quot;numberInProject&quot;,&quot;value&quot;:&quot;719&quot;},{&quot;name&quot;:&quot;summary&quot;,&quot;value&quot;:&quot;Serialize ImportOptions to/from disk using Boost.Serialization instead of JSON&quot;},{&quot;name&quot;:&quot;description&quot;,&quot;value&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;Because of &lt;a href=\&quot;/issue/ST-131\&quot; target=\&quot;_self\&quot; title=\&quot;All of our JSON parsing code is using an invalid error-handling approach\&quot;&gt;ST-131&lt;/a&gt;, it is highly desirable to stop using rapidjson to serialize ImportOptions  to/from disk. (The bogus error-handling approach adopted by this library in the name of performance can cause application termination if we try to access a JSON field that doesn&amp;#39;t exist.)&lt;br/&gt;&lt;br/&gt;My first proposed solution was to keep using JSON, but to use a different library to do it. This would require changing every line of code that currently accesses a JSON field.&lt;br/&gt;&lt;br/&gt;But if we&amp;#39;re going to touch every line of this code anyway, it makes more sense to use Boost.Serialization instead of any JSON library. JSON is suitable as a configuration file format that is intended to be human-edited. But for ImportOptions, we are purely using it as a serialization format. Boost.Serialization, as indicated by its name, was tailor-made for serialization. It is much easier to write serialization code with Boost.Serialization than with any JSON library. The resulting code is far more readable and maintainable. &lt;br/&gt;&lt;br/&gt;ImportOptions only consists of three or four values, so this task will be trivial.&lt;/div&gt;\n&quot;},{&quot;name&quot;:&quot;created&quot;,&quot;value&quot;:&quot;1533926606654&quot;},{&quot;name&quot;:&quot;updated&quot;,&quot;value&quot;:&quot;1533926606654&quot;},{&quot;name&quot;:&quot;updaterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;updaterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;reporterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;reporterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;commentsCount&quot;,&quot;value&quot;:&quot;0&quot;},{&quot;name&quot;:&quot;votes&quot;,&quot;value&quot;:&quot;0&quot;},{&quot;name&quot;:&quot;links&quot;,&quot;value&quot;:[{&quot;value&quot;:&quot;ST-131&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;subtask of&quot;}]},{&quot;name&quot;:&quot;Priority&quot;,&quot;value&quot;:[&quot;Normal&quot;],&quot;valueId&quot;:[&quot;Normal&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#e6f6cf&quot;,&quot;fg&quot;:&quot;#4da400&quot;}},{&quot;name&quot;:&quot;Type&quot;,&quot;value&quot;:[&quot;Task&quot;],&quot;valueId&quot;:[&quot;Task&quot;],&quot;color&quot;:null},{&quot;name&quot;:&quot;State&quot;,&quot;value&quot;:[&quot;Open&quot;],&quot;valueId&quot;:[&quot;Open&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#0070e4&quot;,&quot;fg&quot;:&quot;#fff&quot;}},{&quot;name&quot;:&quot;Assignee&quot;,&quot;value&quot;:[{&quot;value&quot;:&quot;tmclachlan&quot;,&quot;fullName&quot;:&quot;Tyler McLachlan&quot;}]}],&quot;comment&quot;:[],&quot;tag&quot;:[]}, {&quot;id&quot;:&quot;ST-718&quot;,&quot;entityId&quot;:&quot;64-9200&quot;,&quot;jiraId&quot;:null,&quot;field&quot;:[{&quot;name&quot;:&quot;projectShortName&quot;,&quot;value&quot;:&quot;ST&quot;},{&quot;name&quot;:&quot;numberInProject&quot;,&quot;value&quot;:&quot;718&quot;},{&quot;name&quot;:&quot;summary&quot;,&quot;value&quot;:&quot;Move many parameters from MotionPlanningConfig.json to plain old C++ constants in the code&quot;},{&quot;name&quot;:&quot;description&quot;,&quot;value&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;Because of &lt;a href=\&quot;/issue/ST-131\&quot; target=\&quot;_self\&quot; title=\&quot;All of our JSON parsing code is using an invalid error-handling approach\&quot;&gt;ST-131&lt;/a&gt;, it is highly desirable to stop using rapidjson to serialize motion planning configuration parameters to/from disk. (The bogus error-handling approach adopted by this library in the name of performance can cause application termination if we try to access a JSON field that doesn&amp;#39;t exist.)&lt;br/&gt;&lt;br/&gt;My first proposed solution was to keep using JSON, but to use a different library to do it. This would require changing every line of code that currently accesses a JSON field.&lt;br/&gt;&lt;br/&gt;But if we&amp;#39;re going to touch every line of this code anyway,  I think now is a good time to address the fact that many of the values currently stored in MotionPlanningConfig.json are really not worth having in a JSON file in the first place.  These are global constants that hardly ever change &amp;ndash; maybe two or three of these constants have changed in the last four years.  These constants would be far easier to maintain if they were simply declared as constants directly in the C++ code.&lt;br/&gt;&lt;br/&gt;Besides that, all of these values are currently stored in an enormous catch-all struct generically named &amp;quot;Configuration&amp;quot;.  This is not a good design.  If we are going to change these values to C++ constants, those constants should be directly located in the classes that use them.&lt;br/&gt;&lt;br/&gt;This applies to all of the following JSON values:&lt;br/&gt;&lt;span class=\&quot;js-wrapper\&quot;&gt;&lt;/span&gt;&lt;pre class=\&quot;wikicode prettyprint\&quot;&gt;  &amp;quot;global options&amp;quot;: {&lt;br/&gt;    &amp;quot;servo update rate&amp;quot;: 0.0001,&lt;br/&gt;    &amp;quot;minimum fpga pulse duration&amp;quot;: 4E-08,&lt;br/&gt;    &amp;quot;number of axes&amp;quot;: 2,&lt;br/&gt;    &amp;quot;nurbs degree&amp;quot;: 3,&lt;br/&gt;    &amp;quot;artwork sampler&amp;quot;: {&lt;br/&gt;      &amp;quot;sampling resolution&amp;quot;: 0.001&lt;br/&gt;    },&lt;br/&gt;    &amp;quot;path construction&amp;quot;: {&lt;br/&gt;      &amp;quot;max cornering error&amp;quot;: 0.005,&lt;br/&gt;      &amp;quot;max point removal distance&amp;quot;: 0.003,&lt;br/&gt;      &amp;quot;line length leveling factor&amp;quot;: 5.0,&lt;br/&gt;      &amp;quot;max pen up near projection distance&amp;quot;: 0.0,&lt;br/&gt;      &amp;quot;max pen up far projection distance&amp;quot;: 0.0,&lt;br/&gt;      &amp;quot;raster line margin&amp;quot;: 0.025,&lt;br/&gt;      &amp;quot;endpoint snap distance&amp;quot;: 0.001,&lt;br/&gt;      &amp;quot;kerf compensation nurbs segment length&amp;quot;: 0.001,&lt;br/&gt;      &amp;quot;kerf compensation nurbs segment length tolerance factor&amp;quot;: 0.316,&lt;br/&gt;      &amp;quot;nurbs metrics segment length&amp;quot;: 0.01,&lt;br/&gt;      &amp;quot;nurbs metrics segment length tolerance factor&amp;quot;: 0.316&lt;br/&gt;    },&lt;br/&gt;    &amp;quot;path optimization&amp;quot;: {&lt;br/&gt;      &amp;quot;nearest neighbor y motion penalty factor&amp;quot;: 3.0&lt;br/&gt;    },&lt;br/&gt;    &amp;quot;beudaert planner&amp;quot;: {&lt;br/&gt;      &amp;quot;root finding tolerance absolute&amp;quot;: 1E-16,&lt;br/&gt;      &amp;quot;constraint box tolerance absolute&amp;quot;: 1E-10,&lt;br/&gt;      &amp;quot;duplicate intersection tolerance absolute&amp;quot;: 1E-10,&lt;br/&gt;      &amp;quot;tangential velocity tolerance absolute&amp;quot;: 1E-10,&lt;br/&gt;      &amp;quot;max tangential velocity iterations&amp;quot;: 50,&lt;br/&gt;      &amp;quot;num u min steps on backtrack&amp;quot;: 20,&lt;br/&gt;      &amp;quot;max crawl steps per try&amp;quot;: 1,&lt;br/&gt;      &amp;quot;crawl delta u divider&amp;quot;: 1000000.0,&lt;br/&gt;      &amp;quot;minimum knots to trigger subdivision&amp;quot;: 100,&lt;br/&gt;      &amp;quot;extrema finding delta u sub-sampling factor&amp;quot;: 500,&lt;br/&gt;      &amp;quot;extrema finding max samples per inch&amp;quot;: 5000,&lt;br/&gt;      &amp;quot;search bounds delta u sub-sampling factor&amp;quot;: 50,&lt;br/&gt;      &amp;quot;search bounds max samples per inch&amp;quot;: 5000,&lt;br/&gt;      &amp;quot;vector limit relaxation velocity threshold&amp;quot;: 0.0,&lt;br/&gt;      &amp;quot;vector limit relaxation acceleration multiplier&amp;quot;: 1.0,&lt;br/&gt;      &amp;quot;vector limit relaxation jerk multiplier&amp;quot;: 4.0,&lt;br/&gt;      &amp;quot;raster limit relaxation line length threshold&amp;quot;: 0.0,&lt;br/&gt;      &amp;quot;raster limit relaxation acceleration multiplier&amp;quot;: 2.0,&lt;br/&gt;      &amp;quot;raster limit relaxation jerk multiplier&amp;quot;: 4.0&lt;br/&gt;    },&lt;br/&gt;    &amp;quot;available motion up-samplers&amp;quot;: [&lt;br/&gt;      &amp;quot;u domain, linear&amp;quot;,&lt;br/&gt;      &amp;quot;Cartesian domain, linear&amp;quot;,&lt;br/&gt;      &amp;quot;u domain, Akima&amp;quot;,&lt;br/&gt;      &amp;quot;Cartesian domain, Akima&amp;quot;&lt;br/&gt;    ],&lt;br/&gt;    &amp;quot;selected motion up-sampler&amp;quot;: &amp;quot;Cartesian domain, linear&amp;quot;,&lt;br/&gt;    &amp;quot;available feed-forward up-samplers&amp;quot;: [&lt;br/&gt;      &amp;quot;Cartesian domain, linear&amp;quot;,&lt;br/&gt;      &amp;quot;Cartesian domain, Akima&amp;quot;&lt;br/&gt;    ],&lt;br/&gt;    &amp;quot;selected feed-forward up-sampler&amp;quot;: &amp;quot;Cartesian domain, linear&amp;quot;,&lt;br/&gt;    &amp;quot;pulse compensator&amp;quot;: {&lt;br/&gt;      &amp;quot;enabled&amp;quot;: true,&lt;br/&gt;      &amp;quot;start time tmax&amp;quot;: 1.4E-05,&lt;br/&gt;      &amp;quot;start time tlagmax&amp;quot;: 2.72E-05,&lt;br/&gt;      &amp;quot;start time b2&amp;quot;: 49000000.0,&lt;br/&gt;      &amp;quot;start time b3&amp;quot;: 410000000000.0,&lt;br/&gt;      &amp;quot;pulse width tlagmax&amp;quot;: 1.8E-05,&lt;br/&gt;      &amp;quot;pulse width b2&amp;quot;: 39130000.0,&lt;br/&gt;      &amp;quot;pulse width b3&amp;quot;: 36670000000.0&lt;br/&gt;    },&lt;br/&gt;    &amp;quot;motion planning gui settings do not use&amp;quot;: {&lt;br/&gt;      &amp;quot;vector sorting mode&amp;quot;: &amp;quot;inner outer&amp;quot;,&lt;br/&gt;      &amp;quot;path optimization mode&amp;quot;: &amp;quot;nearest neighbor&amp;quot;,&lt;br/&gt;      &amp;quot;kerf width compensation mode&amp;quot;: &amp;quot;none&amp;quot;,&lt;br/&gt;      &amp;quot;kerf width&amp;quot;: 0.001,&lt;br/&gt;      &amp;quot;rotary enabled&amp;quot;: false,&lt;br/&gt;      &amp;quot;rotary radius&amp;quot;: 2.0,&lt;br/&gt;      &amp;quot;pulse compensator laser delay time 0&amp;quot;: 0.0,&lt;br/&gt;      &amp;quot;pulse compensator laser delay time 1&amp;quot;: 0.0,&lt;br/&gt;      &amp;quot;pulse compensator laser delay time 2&amp;quot;: 0.0,&lt;br/&gt;      &amp;quot;artwork x1&amp;quot;: 0.0,&lt;br/&gt;      &amp;quot;artwork y1&amp;quot;: 0.0,&lt;br/&gt;      &amp;quot;artwork x2&amp;quot;: 1.0,&lt;br/&gt;      &amp;quot;artwork y2&amp;quot;: 0.0,&lt;br/&gt;      &amp;quot;artwork x3&amp;quot;: 0.0,&lt;br/&gt;      &amp;quot;artwork y3&amp;quot;: 1.0,&lt;br/&gt;      &amp;quot;artwork x4&amp;quot;: 1.0,&lt;br/&gt;      &amp;quot;artwork y4&amp;quot;: 1.0,&lt;br/&gt;      &amp;quot;fiducial x1&amp;quot;: 0.0,&lt;br/&gt;      &amp;quot;fiducial y1&amp;quot;: 0.0,&lt;br/&gt;      &amp;quot;fiducial x2&amp;quot;: 1.0,&lt;br/&gt;      &amp;quot;fiducial y2&amp;quot;: 0.0,&lt;br/&gt;      &amp;quot;fiducial x3&amp;quot;: 0.0,&lt;br/&gt;      &amp;quot;fiducial y3&amp;quot;: 1.0,&lt;br/&gt;      &amp;quot;fiducial x4&amp;quot;: 1.0,&lt;br/&gt;      &amp;quot;fiducial y4&amp;quot;: 1.0,&lt;br/&gt;      &amp;quot;pierce on pen down&amp;quot;: false,&lt;br/&gt;      &amp;quot;drill pulse period laser 1&amp;quot;: 0.001,&lt;br/&gt;      &amp;quot;drill pulse period laser 2&amp;quot;: 0.003,&lt;br/&gt;      &amp;quot;drill pulse period laser 3&amp;quot;: 0.005,&lt;br/&gt;      &amp;quot;drill duty cycle laser 1&amp;quot;: 20,&lt;br/&gt;      &amp;quot;drill duty cycle laser 2&amp;quot;: 30,&lt;br/&gt;      &amp;quot;drill duty cycle laser 3&amp;quot;: 40,&lt;br/&gt;      &amp;quot;drill dwell time laser 1&amp;quot;: 0.02,&lt;br/&gt;      &amp;quot;drill dwell time laser 2&amp;quot;: 0.03,&lt;br/&gt;      &amp;quot;drill dwell time laser 3&amp;quot;: 0.04&lt;br/&gt;    }&lt;br/&gt;  },&lt;/pre&gt;&lt;span class=\&quot;js-wrapper\&quot;&gt;&lt;script type=\&quot;text/javascript\&quot;&gt;prettyPrint();\n\n&lt;/script&gt;\n&lt;/span&gt;&lt;br/&gt;I have not assigned this issue to the current sprint because it is not strictly necessary before our initial software release. Tyler is working on this task on an SVN branch that will have no effect on the trunk software or the initial released software unless it gets done in time, and the management decides to incorporate this feature into the initial release.&lt;/div&gt;\n&quot;},{&quot;name&quot;:&quot;created&quot;,&quot;value&quot;:&quot;1533926436566&quot;},{&quot;name&quot;:&quot;updated&quot;,&quot;value&quot;:&quot;1533926436566&quot;},{&quot;name&quot;:&quot;updaterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;updaterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;reporterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;reporterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;commentsCount&quot;,&quot;value&quot;:&quot;0&quot;},{&quot;name&quot;:&quot;votes&quot;,&quot;value&quot;:&quot;0&quot;},{&quot;name&quot;:&quot;links&quot;,&quot;value&quot;:[{&quot;value&quot;:&quot;ST-131&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;subtask of&quot;}]},{&quot;name&quot;:&quot;Priority&quot;,&quot;value&quot;:[&quot;Normal&quot;],&quot;valueId&quot;:[&quot;Normal&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#e6f6cf&quot;,&quot;fg&quot;:&quot;#4da400&quot;}},{&quot;name&quot;:&quot;Type&quot;,&quot;value&quot;:[&quot;Task&quot;],&quot;valueId&quot;:[&quot;Task&quot;],&quot;color&quot;:null},{&quot;name&quot;:&quot;State&quot;,&quot;value&quot;:[&quot;Open&quot;],&quot;valueId&quot;:[&quot;Open&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#0070e4&quot;,&quot;fg&quot;:&quot;#fff&quot;}},{&quot;name&quot;:&quot;Assignee&quot;,&quot;value&quot;:[{&quot;value&quot;:&quot;tmclachlan&quot;,&quot;fullName&quot;:&quot;Tyler McLachlan&quot;}]}],&quot;comment&quot;:[],&quot;tag&quot;:[]}, {&quot;id&quot;:&quot;ST-716&quot;,&quot;entityId&quot;:&quot;64-9196&quot;,&quot;jiraId&quot;:null,&quot;field&quot;:[{&quot;name&quot;:&quot;projectShortName&quot;,&quot;value&quot;:&quot;ST&quot;},{&quot;name&quot;:&quot;numberInProject&quot;,&quot;value&quot;:&quot;716&quot;},{&quot;name&quot;:&quot;summary&quot;,&quot;value&quot;:&quot;Serialize PrintParams to/from disk using Boost.Serialization instead of JSON&quot;},{&quot;name&quot;:&quot;description&quot;,&quot;value&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;Because of &lt;a href=\&quot;/issue/ST-131\&quot; target=\&quot;_self\&quot; title=\&quot;All of our JSON parsing code is using an invalid error-handling approach\&quot;&gt;ST-131&lt;/a&gt;, it is highly desirable to stop using rapidjson to serialize PrintParams to/from disk.  (The bogus error-handling approach adopted by this library in the name of performance can cause application termination if we try to access a JSON field that doesn&amp;#39;t exist.)&lt;br/&gt;&lt;br/&gt;My first proposed solution was to keep using JSON, but to use a different library to do it.  This would require changing every line of code that currently access a JSON field.&lt;br/&gt;&lt;br/&gt;But if we&amp;#39;re going to touch every line of this code anyway, it makes more sense to use Boost.Serialization instead of any JSON library.  JSON is suitable as a configuration file format that is intended to be human-edited.  But for PrintParams, we are purely using it as a serialization format.  Boost.Serialization, as indicated by its name, was tailor-made for serialization.  It is &lt;strong&gt;much&lt;/strong&gt; easier to write serialization code with Boost.Serialization than with any JSON library.  The resulting code is far more readable and maintainable.  I am certain that it will be less work to change our PrintParams serialization to use Boost.Serialization than it would be to update all of our PrintParams JSON code, and the end result will be better.&lt;/div&gt;\n&quot;},{&quot;name&quot;:&quot;created&quot;,&quot;value&quot;:&quot;1533925681506&quot;},{&quot;name&quot;:&quot;updated&quot;,&quot;value&quot;:&quot;1533926141631&quot;},{&quot;name&quot;:&quot;updaterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;updaterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;reporterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;reporterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;commentsCount&quot;,&quot;value&quot;:&quot;1&quot;},{&quot;name&quot;:&quot;votes&quot;,&quot;value&quot;:&quot;0&quot;},{&quot;name&quot;:&quot;links&quot;,&quot;value&quot;:[{&quot;value&quot;:&quot;ST-131&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;subtask of&quot;}]},{&quot;name&quot;:&quot;Priority&quot;,&quot;value&quot;:[&quot;Normal&quot;],&quot;valueId&quot;:[&quot;Normal&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#e6f6cf&quot;,&quot;fg&quot;:&quot;#4da400&quot;}},{&quot;name&quot;:&quot;Type&quot;,&quot;value&quot;:[&quot;Task&quot;],&quot;valueId&quot;:[&quot;Task&quot;],&quot;color&quot;:null},{&quot;name&quot;:&quot;State&quot;,&quot;value&quot;:[&quot;In Progress&quot;],&quot;valueId&quot;:[&quot;In Progress&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#fed74a&quot;,&quot;fg&quot;:&quot;#444&quot;}},{&quot;name&quot;:&quot;Assignee&quot;,&quot;value&quot;:[{&quot;value&quot;:&quot;tmclachlan&quot;,&quot;fullName&quot;:&quot;Tyler McLachlan&quot;}]}],&quot;comment&quot;:[{&quot;id&quot;:&quot;69-16523&quot;,&quot;author&quot;:&quot;tcrews&quot;,&quot;authorFullName&quot;:&quot;Tim Crews&quot;,&quot;issueId&quot;:&quot;ST-716&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;I have not assigned this issue to the current sprint, even though Tyler is currently working on it, because it is not strictly necessary before our initial software release.  Tyler is working on this task on an SVN branch that will have no effect on the trunk software or the initial released software unless it gets done in time, and the management decides to incorporate this feature into the initial release.&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1533925895446,&quot;updated&quot;:null,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]}],&quot;tag&quot;:[]}, {&quot;id&quot;:&quot;ST-9&quot;,&quot;entityId&quot;:&quot;64-4975&quot;,&quot;jiraId&quot;:null,&quot;field&quot;:[{&quot;name&quot;:&quot;projectShortName&quot;,&quot;value&quot;:&quot;ST&quot;},{&quot;name&quot;:&quot;numberInProject&quot;,&quot;value&quot;:&quot;9&quot;},{&quot;name&quot;:&quot;summary&quot;,&quot;value&quot;:&quot;Implement DatabaseMigrator using cross-platform technology&quot;},{&quot;name&quot;:&quot;description&quot;,&quot;value&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;If we are going to run the DB Server on Linux and macOS, then we will need to be able to install and upgrade the materials database on those platforms, which I think means we will need to run the DatabaseMigrator application.&lt;br/&gt;&lt;br/&gt;DatabaseMigrator is written in C#.  That in itself is not a show-stopper, because Mono is available for Mac OS.  But DatabaseMigrator also depends on a few NuGet packages that might not be available in that environment.&lt;br/&gt;&lt;br/&gt;Austyn and I have discussed this.  We are leaning towards using C++ and SOCI, the same technology used by DB Server itself.&lt;/div&gt;\n&quot;},{&quot;name&quot;:&quot;created&quot;,&quot;value&quot;:&quot;1488297180566&quot;},{&quot;name&quot;:&quot;updated&quot;,&quot;value&quot;:&quot;1533233637597&quot;},{&quot;name&quot;:&quot;updaterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;updaterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;reporterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;reporterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;commentsCount&quot;,&quot;value&quot;:&quot;4&quot;},{&quot;name&quot;:&quot;votes&quot;,&quot;value&quot;:&quot;0&quot;},{&quot;name&quot;:&quot;links&quot;,&quot;value&quot;:[{&quot;value&quot;:&quot;ST-583&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;},{&quot;value&quot;:&quot;ST-584&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;},{&quot;value&quot;:&quot;ST-585&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;},{&quot;value&quot;:&quot;ST-586&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;},{&quot;value&quot;:&quot;ST-587&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;},{&quot;value&quot;:&quot;ST-632&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;}]},{&quot;name&quot;:&quot;Priority&quot;,&quot;value&quot;:[&quot;Normal&quot;],&quot;valueId&quot;:[&quot;Normal&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#e6f6cf&quot;,&quot;fg&quot;:&quot;#4da400&quot;}},{&quot;name&quot;:&quot;Type&quot;,&quot;value&quot;:[&quot;Feature&quot;],&quot;valueId&quot;:[&quot;Feature&quot;],&quot;color&quot;:null},{&quot;name&quot;:&quot;State&quot;,&quot;value&quot;:[&quot;In Progress&quot;],&quot;valueId&quot;:[&quot;In Progress&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#fed74a&quot;,&quot;fg&quot;:&quot;#444&quot;}},{&quot;name&quot;:&quot;Assignee&quot;,&quot;value&quot;:[{&quot;value&quot;:&quot;tmclachlan&quot;,&quot;fullName&quot;:&quot;Tyler McLachlan&quot;}]},{&quot;name&quot;:&quot;Milestone&quot;,&quot;value&quot;:[&quot;2018 08 10&quot;],&quot;valueId&quot;:[&quot;2018 08 10&quot;],&quot;color&quot;:null}],&quot;comment&quot;:[{&quot;id&quot;:&quot;69-14741&quot;,&quot;author&quot;:&quot;tcrews&quot;,&quot;authorFullName&quot;:&quot;Tim Crews&quot;,&quot;issueId&quot;:&quot;ST-9&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;Tyler McLachlan will start working on this now.  Although he has a YouTrack login, his user name does not appear in the list of available names for the Assignee field.&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1527531817180,&quot;updated&quot;:1527531827679,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]},{&quot;id&quot;:&quot;69-14932&quot;,&quot;author&quot;:&quot;wvalentine&quot;,&quot;authorFullName&quot;:&quot;Wendy Valentine&quot;,&quot;issueId&quot;:&quot;ST-9&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;&lt;a href=\&quot;/user/tcrews\&quot; title=\&quot;tcrews\&quot;&gt;Tim Crews&lt;/a&gt; Can we turn this into a feature with subtasks to track?&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1528157666576,&quot;updated&quot;:null,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]},{&quot;id&quot;:&quot;69-15163&quot;,&quot;author&quot;:&quot;tcrews&quot;,&quot;authorFullName&quot;:&quot;Tim Crews&quot;,&quot;issueId&quot;:&quot;ST-9&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;This will not actually be done by 6/15, but it does have to be done before the software is deployed.  I didn&amp;#39;t want this feature to get lost.&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1528977826716,&quot;updated&quot;:1527531817165,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]},{&quot;id&quot;:&quot;69-15169&quot;,&quot;author&quot;:&quot;wvalentine&quot;,&quot;authorFullName&quot;:&quot;Wendy Valentine&quot;,&quot;issueId&quot;:&quot;ST-9&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;&lt;a href=\&quot;/user/tcrews\&quot; title=\&quot;tcrews\&quot;&gt;Tim Crews&lt;/a&gt; &lt;a href=\&quot;/user/tmclachlan\&quot; title=\&quot;tmclachlan\&quot;&gt;Tyler McLachlan&lt;/a&gt; Do we have a timeline on this yet?&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1528990926983,&quot;updated&quot;:1528157666576,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]}],&quot;tag&quot;:[]}]" />
        <entry key="ThirdParty tmclachlan@http://youtrack.intranet.ulsinc.com" value="[{&quot;id&quot;:&quot;ST-131&quot;,&quot;entityId&quot;:&quot;64-6173&quot;,&quot;jiraId&quot;:null,&quot;field&quot;:[{&quot;name&quot;:&quot;projectShortName&quot;,&quot;value&quot;:&quot;ST&quot;},{&quot;name&quot;:&quot;numberInProject&quot;,&quot;value&quot;:&quot;131&quot;},{&quot;name&quot;:&quot;summary&quot;,&quot;value&quot;:&quot;All of our JSON parsing code is using an invalid error-handling approach&quot;},{&quot;name&quot;:&quot;description&quot;,&quot;value&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;The rapidjson library by design does not use C++ exceptions.  This is one of the ways that it achieves its very fast performance.  We do not particularly need its very fast performance &amp;ndash; UlsControl typically parses a JSON file every couple of minutes, and the difference between 10ms and 100ms to parse such a file is totally irrelevant.  I would prefer to use a library that throws meaningful exceptions when error conditions occur, at the expense of somewhat slower performance.&lt;br/&gt;&lt;br/&gt;I was not really focused on that issue when I first started writing code that used rapidjson.  At some point I discovered that rapidjson was using assert() calls to check for various error conditions &amp;ndash; for example, trying to access a field that does not exist in the JSON document.  I very strongly believe that this is an inappropriate use of assert().  Assert() is meant to enforce global invariants whose violation is an indication of a coding error.  Assert() is compiled away to nothing in release builds.  This is an atrocious way to handle run-time errors.&lt;br/&gt;&lt;br/&gt;Apparently the authors of rapidjson think that the coding error is the fault of the user of their library; the calling code should know better than to try to access a field that doesn&amp;#39;t exist.&lt;br/&gt;&lt;br/&gt;Anyway, it appears that my decision at the time was to simply translate the assert() calls into throws of C++ exceptions using the RAPIDJSON_ASSERT macro.  Then I wrote nice simple JSON parsing code (for example, UlsHttpTransition.cpp, LoadPrintSettingsFromJSON) that had a single try/catch around the whole function.&lt;br/&gt;&lt;br/&gt;But now we are using more modern compilers that are detecting some coding errors that weren&amp;#39;t being detected two years ago.  In particular, both Clang and gcc are emitting compiler warnings indicating that RAPIDJSON_ASSERT (which is throwing an exception) is being used in rapidjson functions that are labelled &amp;quot;noexcept&amp;quot;.  The result will be that these exceptions will not be propagated; they will immediately result in a call to std::terminate, which will crash the application.&lt;br/&gt;&lt;br/&gt;So I have two choices:&lt;br/&gt;&lt;ul class=\&quot;wiki-list0\&quot;&gt;&lt;li&gt; Use a different JSON parsing library that uses C++ exceptions to indicate error conditions like this.&lt;br/&gt;&lt;/li&gt;&lt;li&gt; Change all of our JSON parsing code to not use operator[] to access fields, but instead explicitly check for the presence of each field before accessing it.  &lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;Unfortunately in both cases, there are hundreds if not thousands of JSON field accesses in our code.  This will be a lot of work.  But it is necessary; currently UlsControl will immediately crash if we feed it a JSON document that is missing expected fields.&lt;/div&gt;\n&quot;},{&quot;name&quot;:&quot;created&quot;,&quot;value&quot;:&quot;1503069454916&quot;},{&quot;name&quot;:&quot;updated&quot;,&quot;value&quot;:&quot;1533660218307&quot;},{&quot;name&quot;:&quot;updaterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;updaterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;reporterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;reporterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;commentsCount&quot;,&quot;value&quot;:&quot;3&quot;},{&quot;name&quot;:&quot;votes&quot;,&quot;value&quot;:&quot;0&quot;},{&quot;name&quot;:&quot;Priority&quot;,&quot;value&quot;:[&quot;Normal&quot;],&quot;valueId&quot;:[&quot;Normal&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#e6f6cf&quot;,&quot;fg&quot;:&quot;#4da400&quot;}},{&quot;name&quot;:&quot;Type&quot;,&quot;value&quot;:[&quot;Bug&quot;],&quot;valueId&quot;:[&quot;Bug&quot;],&quot;color&quot;:null},{&quot;name&quot;:&quot;State&quot;,&quot;value&quot;:[&quot;In Progress&quot;],&quot;valueId&quot;:[&quot;In Progress&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#fed74a&quot;,&quot;fg&quot;:&quot;#444&quot;}},{&quot;name&quot;:&quot;Assignee&quot;,&quot;value&quot;:[{&quot;value&quot;:&quot;tmclachlan&quot;,&quot;fullName&quot;:&quot;Tyler McLachlan&quot;}]},{&quot;name&quot;:&quot;Milestone&quot;,&quot;value&quot;:[&quot;2018 08 10&quot;],&quot;valueId&quot;:[&quot;2018 08 10&quot;],&quot;color&quot;:null}],&quot;comment&quot;:[{&quot;id&quot;:&quot;69-9732&quot;,&quot;author&quot;:&quot;tcrews&quot;,&quot;authorFullName&quot;:&quot;Tim Crews&quot;,&quot;issueId&quot;:&quot;ST-131&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;I spent some time this weekend investigating how much work it will be to fix this.  It will be a lot.  No matter how we do it, it will involve touching every line of code that accesses a field in a JSON file.  There are thousands of such lines.&lt;br/&gt;&lt;br/&gt;I created a feature branch branches/tcrews/JsonErrors.  In that branch, I deleted rapidjson and replaced it with &lt;a href=\&quot;https://github.com/nlohmann/json\&quot; onclick=\&quot;window.open(window.decodeURIComponent('https%3A%2F%2Fgithub.com%2Fnlohmann%2Fjson'), '_blank').opener=null; return false;\&quot;&gt;https://github.com/nlohmann/json&lt;/a&gt;.  This looks like a very nice C++ JSON library.&lt;br/&gt;&lt;br/&gt;I started working my way through the UlsCommon project, fixing up each line of JSON code.  After a total of about three hours of work, I estimate I was less than halfway done just with that project.  I think it would take ten to twenty more hours of work to finish this task.  I have left that branch in its partially-completed state, but I will not continue working on it unless directed by the management.&lt;br/&gt;&lt;br/&gt;In the meantime, if DBServer or UlsControl [edit: or UILauncher] tries to access a JSON file that is missing a field, the application will crash.  This is not quite the major issue that it sounds like because our own software creates those JSON files, and it does not create them with missing fields. [Edit: Except during maintenance, or when we are transitioning between different JSON formats.]  But if a user hand-edited one of our JSON files, that could cause a crash.  Users shouldn&amp;#39;t do that.&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1503336174098,&quot;updated&quot;:1507038772507,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]},{&quot;id&quot;:&quot;69-14748&quot;,&quot;author&quot;:&quot;ajones&quot;,&quot;authorFullName&quot;:&quot;Aaron Jones&quot;,&quot;issueId&quot;:&quot;ST-131&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;&lt;div class=\&quot;wiki quote\&quot;&gt;Change all of our JSON parsing code to not use operator[] to access fields, but instead explicitly check for the presence of each field before accessing it.  &lt;/div&gt;&lt;br/&gt;&lt;br/&gt;I haven&amp;#39;t looked at the code yet, but is there any chance we could write a clever awk or sed script to modify the code to check for presence before accessing a field?&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1527607607741,&quot;updated&quot;:null,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]},{&quot;id&quot;:&quot;69-14749&quot;,&quot;author&quot;:&quot;tcrews&quot;,&quot;authorFullName&quot;:&quot;Tim Crews&quot;,&quot;issueId&quot;:&quot;ST-131&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;When I made the changes on branches/tcrews/JsonErrors, I used regular expression search and replace as much as possible within my IDE.  I preferred this to sed/awk because it allowed me to be more targeted with the regions of code being affected, and also allowed me to account for minor variations in different code modules.&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1527611016821,&quot;updated&quot;:1503336174089,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]}],&quot;tag&quot;:[]}, {&quot;id&quot;:&quot;ST-9&quot;,&quot;entityId&quot;:&quot;64-4975&quot;,&quot;jiraId&quot;:null,&quot;field&quot;:[{&quot;name&quot;:&quot;projectShortName&quot;,&quot;value&quot;:&quot;ST&quot;},{&quot;name&quot;:&quot;numberInProject&quot;,&quot;value&quot;:&quot;9&quot;},{&quot;name&quot;:&quot;summary&quot;,&quot;value&quot;:&quot;Implement DatabaseMigrator using cross-platform technology&quot;},{&quot;name&quot;:&quot;description&quot;,&quot;value&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;If we are going to run the DB Server on Linux and macOS, then we will need to be able to install and upgrade the materials database on those platforms, which I think means we will need to run the DatabaseMigrator application.&lt;br/&gt;&lt;br/&gt;DatabaseMigrator is written in C#.  That in itself is not a show-stopper, because Mono is available for Mac OS.  But DatabaseMigrator also depends on a few NuGet packages that might not be available in that environment.&lt;br/&gt;&lt;br/&gt;Austyn and I have discussed this.  We are leaning towards using C++ and SOCI, the same technology used by DB Server itself.&lt;/div&gt;\n&quot;},{&quot;name&quot;:&quot;created&quot;,&quot;value&quot;:&quot;1488297180566&quot;},{&quot;name&quot;:&quot;updated&quot;,&quot;value&quot;:&quot;1533233637597&quot;},{&quot;name&quot;:&quot;updaterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;updaterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;reporterName&quot;,&quot;value&quot;:&quot;tcrews&quot;},{&quot;name&quot;:&quot;reporterFullName&quot;,&quot;value&quot;:&quot;Tim Crews&quot;},{&quot;name&quot;:&quot;commentsCount&quot;,&quot;value&quot;:&quot;4&quot;},{&quot;name&quot;:&quot;votes&quot;,&quot;value&quot;:&quot;0&quot;},{&quot;name&quot;:&quot;links&quot;,&quot;value&quot;:[{&quot;value&quot;:&quot;ST-583&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;},{&quot;value&quot;:&quot;ST-584&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;},{&quot;value&quot;:&quot;ST-585&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;},{&quot;value&quot;:&quot;ST-586&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;},{&quot;value&quot;:&quot;ST-587&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;},{&quot;value&quot;:&quot;ST-632&quot;,&quot;type&quot;:&quot;Subtask&quot;,&quot;role&quot;:&quot;parent for&quot;}]},{&quot;name&quot;:&quot;Priority&quot;,&quot;value&quot;:[&quot;Normal&quot;],&quot;valueId&quot;:[&quot;Normal&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#e6f6cf&quot;,&quot;fg&quot;:&quot;#4da400&quot;}},{&quot;name&quot;:&quot;Type&quot;,&quot;value&quot;:[&quot;Feature&quot;],&quot;valueId&quot;:[&quot;Feature&quot;],&quot;color&quot;:null},{&quot;name&quot;:&quot;State&quot;,&quot;value&quot;:[&quot;In Progress&quot;],&quot;valueId&quot;:[&quot;In Progress&quot;],&quot;color&quot;:{&quot;bg&quot;:&quot;#fed74a&quot;,&quot;fg&quot;:&quot;#444&quot;}},{&quot;name&quot;:&quot;Assignee&quot;,&quot;value&quot;:[{&quot;value&quot;:&quot;tmclachlan&quot;,&quot;fullName&quot;:&quot;Tyler McLachlan&quot;}]},{&quot;name&quot;:&quot;Milestone&quot;,&quot;value&quot;:[&quot;2018 08 10&quot;],&quot;valueId&quot;:[&quot;2018 08 10&quot;],&quot;color&quot;:null}],&quot;comment&quot;:[{&quot;id&quot;:&quot;69-14741&quot;,&quot;author&quot;:&quot;tcrews&quot;,&quot;authorFullName&quot;:&quot;Tim Crews&quot;,&quot;issueId&quot;:&quot;ST-9&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;Tyler McLachlan will start working on this now.  Although he has a YouTrack login, his user name does not appear in the list of available names for the Assignee field.&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1527531817180,&quot;updated&quot;:1527531827679,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]},{&quot;id&quot;:&quot;69-14932&quot;,&quot;author&quot;:&quot;wvalentine&quot;,&quot;authorFullName&quot;:&quot;Wendy Valentine&quot;,&quot;issueId&quot;:&quot;ST-9&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;&lt;a href=\&quot;/user/tcrews\&quot; title=\&quot;tcrews\&quot;&gt;Tim Crews&lt;/a&gt; Can we turn this into a feature with subtasks to track?&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1528157666576,&quot;updated&quot;:null,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]},{&quot;id&quot;:&quot;69-15163&quot;,&quot;author&quot;:&quot;tcrews&quot;,&quot;authorFullName&quot;:&quot;Tim Crews&quot;,&quot;issueId&quot;:&quot;ST-9&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;This will not actually be done by 6/15, but it does have to be done before the software is deployed.  I didn&amp;#39;t want this feature to get lost.&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1528977826716,&quot;updated&quot;:1527531817165,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]},{&quot;id&quot;:&quot;69-15169&quot;,&quot;author&quot;:&quot;wvalentine&quot;,&quot;authorFullName&quot;:&quot;Wendy Valentine&quot;,&quot;issueId&quot;:&quot;ST-9&quot;,&quot;parentId&quot;:null,&quot;deleted&quot;:false,&quot;jiraId&quot;:null,&quot;text&quot;:&quot;&lt;div class=\&quot;wiki text\&quot;&gt;&lt;a href=\&quot;/user/tcrews\&quot; title=\&quot;tcrews\&quot;&gt;Tim Crews&lt;/a&gt; &lt;a href=\&quot;/user/tmclachlan\&quot; title=\&quot;tmclachlan\&quot;&gt;Tyler McLachlan&lt;/a&gt; Do we have a timeline on this yet?&lt;/div&gt;\n&quot;,&quot;shownForIssueAuthor&quot;:false,&quot;created&quot;:1528990926983,&quot;updated&quot;:1528157666576,&quot;permittedGroup&quot;:null,&quot;replies&quot;:[]}],&quot;tag&quot;:[]}]" />
      </map>
    </option>
  </component>
</application>